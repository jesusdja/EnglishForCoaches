@model EnglishForCoachesWeb.Areas.Admin.Models.JuegoEditViewModel


@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}<!-- Page Header -->
<div class="content bg-gray-lighter">
    <div class="row items-push">
        <div class="col-sm-12">
            <h1 class="page-heading">

                <a href="@Url.Action("Index", "Subtemas", new {id = @Model.Subtema.TemaId })">
                    @Model.Subtema.Tema.Descripcion
                </a>
                / <a href="@Url.Action("Index", "Bloques", new {id = @Model.Subtema.SubTemaId })">
                    @Model.Subtema.Descripcion
                </a> / Editar Juego
            </h1>
        </div>
    </div>
</div>
<!-- END Page Header -->
<!-- Page Content -->
<div class="content content-narrow">

    @using (Html.BeginForm("Edit", "Juegos", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal push-10-t" }))
    {

        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.Juego.JuegoId)
        @Html.HiddenFor(model => model.Juego.Fichero)
        @Html.HiddenFor(model => model.Juego.SubTemaId)

        <div class="block">
            <div class="block-content block-content-full">



                <div class="form-group">
                    <div class="col-sm-12">
                        <div class="form-material">
                            @Html.DropDownListFor(model => model.Juego.CategoriaJuegoId, Model.categoriaJuegosSelectList, new { @class = "form-control" })
                            @Html.LabelFor(model => model.Juego.CategoriaJuegoId, htmlAttributes: new { @class = "" })
                            @Html.ValidationMessageFor(model => model.Juego.CategoriaJuegoId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12">
                        <div class="form-material">
                            @Html.LabelFor(model => model.Juego.Titulo, htmlAttributes: new { @class = "" })
                            @Html.EditorFor(model => model.Juego.Titulo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Juego.Titulo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>

                <div class="form-group">
                    <div class="col-sm-12">
                        <div class="form-material">
                            @Html.TextAreaFor(model => model.Juego.Explicacion, new { @class = "form-control", id = "js-summernote" })
                            @Html.ValidationMessageFor(model => model.Juego.Explicacion, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => model.Juego.Explicacion, htmlAttributes: new { @class = "" })
                        </div>
                    </div>
                </div>






                <div class="form-group">
                    <div class="col-sm-12">
                        <div class="form-material">
                            @Html.TextBoxFor(model => model.File, new { type = "file", accept = ".pdf" })
                            @Html.ValidationMessageFor(model => model.File)
                            @Html.LabelFor(model => model.File, htmlAttributes: new { @class = "" })
                        </div>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Model.Juego.Fichero))
                {
                    <div class="form-group">
                        <div class="col-sm-12">
                            <div class="form-material">
                                <a target="_blank" href="/media/upload/juegos/@Model.Juego.Fichero">Fichero</a>
                            </div>
                        </div>
                    </div>
                }

                <div class="form-group">
                    <div class="col-sm-12">
                        <h5>
                            Clientes
                        </h5>
                        @for (var j = 0; j < Model.Clientes.Count; j++)
                        {
                            <div class="col-sm-4">
                                <div class="checkbox">
                                    <label>
                                        @Html.CheckBoxFor(m => m.Clientes[j].Selected, new { id = "chk_" + j })
                                        @Html.HiddenFor(m => m.Clientes[j].Text)
                                        @Html.HiddenFor(m => m.Clientes[j].Value)
                                        <span>@Model.Clientes[j].Text</span>
                                    </label>
                                </div>
                            </div>
                        }
                    </div>
                </div>


            </div>
                </div>
                <div class="block-content block-content-full">
                    <div class="form-group">
                        <div class="col-sm-12 text-right">
                            <input type="submit" value="Guardar Juego" name="command" class="btn btn-default" />
                        </div>
                    </div>
                </div>
                }
            </div>
<!-- END Page Content -->

@section Scripts {

<link href="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.css" rel="stylesheet">
<script src="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.js"></script>
    <script src="~/Scripts/masked-inputs/jquery.maskedinput.min.js"></script>
    <script src="~/Scripts/jquery-tags-input/jquery.tagsinput.min.js"></script>

    <!-- Page JS Code -->
    <script>
                                $(function () {
                                    // Init datepicker (with .js-datepicker and .input-daterange class)
                                    $('.datetimepicker').datetimepicker({
                                        locale: 'es'
                                    });

                                    // Init Tags Inputs (with .js-tags-input class)
                                    jQuery('.js-tags-input').tagsInput({
                                        height: '36px',
                                        width: '100%',
                                        defaultText: 'Add tag',
                                        removeWithBackspace: true,
                                        delimiter: [',']
                                    });


                                    // Init Masked Inputs
                                    // a - Represents an alpha character (A-Z,a-z)
                                    // 9 - Represents a numeric character (0-9)
                                    // * - Represents an alphanumeric character (A-Z,a-z,0-9)
                                    jQuery('.js-masked-date').mask('99/99/9999');
                                    jQuery('.js-masked-date-dash').mask('99-99-9999');
                                    jQuery('.js-masked-phone').mask('(999) 999-9999');
                                    jQuery('.js-masked-phone-ext').mask('(999) 999-9999? x99999');
                                    jQuery('.js-masked-taxid').mask('99-9999999');
                                    jQuery('.js-masked-ssn').mask('999-99-9999');
                                    jQuery('.js-masked-pkey').mask('a*-999-a999');

                                    var arrayBotones = [
                                            ['styleList', ['style']],
                                            ['style', ['bold', 'italic', 'underline', 'clear']],
                                            ['fontsize', ['fontsize']],
                                            ['color', ['color']],
                                            ['para', ['ul', 'ol', 'paragraph']],
                                            ['height', ['height']],
                                            ['table', ['table']],
                                            ['insert', ['link', 'picture', 'video', 'hr']],
                                            ['misc', ['fullscreen', 'codeview']],
                                            ['help', ['help']]
                                    ];

                                    console.log(arrayBotones);
                                    // Init full text editor
                                    jQuery('#js-summernote').summernote({
                                        height: 350,
                                        minHeight: null,
                                        maxHeight: null,
                                        toolbar: arrayBotones
                                    });

                                });
                                jQuery.fn.selectText = function () {
                                    var range, selection;
                                    return this.each(function () {
                                        if (document.body.createTJuegonge) {
                                            range = document.body.createTJuegonge();
                                            range.moveToElementText(this);
                                            range.select();
                                        } else if (window.getSelection) {
                                            selection = window.getSelection();
                                            range = document.createRange();
                                            range.selectNodeContents(this);
                                            selection.removeAllRanges();
                                            selection.addRange(range);
                                        }
                                    });
                                };
                              

                                $('#js-summernote').on('summernote.paste', function (customEvent, nativeEvent) {
                                    setTimeout(function () {
                                        console.log($('.note-editable'));
                                        $('.note-editable').selectText();
                                        $("#js-summernote").summernote("removeFormat");
                                    }, 100);
                                });
                            
    </script>
}
