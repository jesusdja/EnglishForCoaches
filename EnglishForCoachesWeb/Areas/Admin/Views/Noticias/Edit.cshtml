@model EnglishForCoachesWeb.Areas.Admin.Models.NoticiaEditViewModel


@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}<!-- Page Header -->
<div class="content bg-gray-lighter">
    <div class="row items-push">
        <div class="col-sm-12">
            <h1 class="page-heading">
                Editar Noticia
            </h1>
        </div>
    </div>
</div>
<!-- END Page Header -->
<!-- Page Content -->
<div class="content content-narrow">

    @using (Html.BeginForm("Edit", "Noticias", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal push-10-t" }))
    {

        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.Noticia.Fecha)
        @Html.HiddenFor(model => model.Noticia.NoticiaId)
        @Html.HiddenFor(model => model.Noticia.Foto)
        @Html.HiddenFor(model => model.Noticia.FicheroAdjunto)
        @Html.HiddenFor(model => model.Noticia.UsuarioId)


        <div class="block">
            <div class="block-content block-content-full">



                <div class="form-group">
                    <div class="col-sm-12">
                        <div class="form-material">
                            @Html.LabelFor(model => model.Noticia.Titulo, htmlAttributes: new { @class = "" })
                            @Html.EditorFor(model => model.Noticia.Titulo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Noticia.Titulo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>

                <div class="form-group">
                    <div class="col-sm-12">
                        <div class="form-material">
                            @Html.TextAreaFor(model => model.Noticia.Texto, new { @class = "form-control", id = "js-summernote" })
                            @Html.ValidationMessageFor(model => model.Noticia.Texto, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => model.Noticia.Texto, htmlAttributes: new { @class = "" })
                        </div>
                    </div>
                </div>



                <div class="form-group">
                    <div class="col-sm-2">
                        <div class="form-material">
                            @if (!string.IsNullOrEmpty(Model.Noticia.FicheroAdjunto))
                            {
                                <a href="~/media/upload/Noticias_adjuntos/@Model.Noticia.FicheroAdjunto"> Fichero adjunto</a>
                            }
                        </div>
                    </div>
                    <div class="col-sm-10">
                        <div class="form-material">
                            @Html.TextBoxFor(model => model.File, new { type = "file", accept = ".*" })
                            @Html.ValidationMessageFor(model => model.File)
                            @Html.LabelFor(model => model.File, htmlAttributes: new { @class = "" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-12">
                        <div class="form-material">
                            @Html.TextBoxFor(model => model.ImageFile, new { type = "file", accept = ".jpg" })
                            @Html.ValidationMessageFor(model => model.ImageFile)
                            @Html.LabelFor(model => model.ImageFile, htmlAttributes: new { @class = "" })
                        </div>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Model.Noticia.Foto))
                {
                    <div class="form-group">
                        <div class="col-sm-12">
                            <div class="form-material">
                                <img src="~/media/upload/Noticias_imagenes/@(Model.Noticia.Foto)?d=@DateTime.Now.Millisecond" />
                            </div>
                        </div>
                    </div>
                }
                @if (User.IsInRole("Admin"))
                {
                    <div class="form-group">
                        <div class="col-sm-6">
                            <div class="form-material">
                                @Html.DropDownListFor(model => model.Noticia.ClienteId, Model.ClienteSelectList, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Noticia.ClienteId, null, new { @class = "help-block animated fadeInDown" })
                                @Html.LabelFor(model => model.Noticia.ClienteId, htmlAttributes: new { @class = "" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @for (var i = 0; i < Model.GruposUsuarios.Count(); i++)
                        {
                            <div class="col-sm-3">
                                @Html.HiddenFor(model => Model.GruposUsuarios[i].Id)
                                @Html.HiddenFor(model => Model.GruposUsuarios[i].Descripcion)
                                @Html.CheckBoxFor(model => Model.GruposUsuarios[i].Seleccionado)
                                @Html.LabelFor(model => Model.GruposUsuarios[i].Seleccionado, Model.GruposUsuarios[i].Descripcion)
                            </div>
                        }

                    </div>
                }
                @if (User.IsInRole("AdministradorGrupo"))
                {
                    for (var i = 0; i < Model.GruposUsuarios.Count(); i++)
                    {
                        @Html.HiddenFor(model => Model.GruposUsuarios[i].Id)
                        @Html.HiddenFor(model => Model.GruposUsuarios[i].Descripcion)
                        @Html.HiddenFor(model => Model.GruposUsuarios[i].Seleccionado)

                    }

                }

            </div>
                </div>
                <div class="block-content block-content-full">
                    <div class="form-group">
                        <div class="col-sm-12 text-right">
                            <input type="submit" value="Guardar Noticia" name="command" class="btn btn-default" />
                        </div>
                    </div>
                </div>
                }
            </div>
<!-- END Page Content -->

@section Scripts {

<link href="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.css" rel="stylesheet">
<script src="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.js"></script>
    <script src="~/Scripts/masked-inputs/jquery.maskedinput.min.js"></script>
    <script src="~/Scripts/jquery-tags-input/jquery.tagsinput.min.js"></script>

    <!-- Page JS Code -->
    <script>
                                $(function () {
                                    // Init datepicker (with .js-datepicker and .input-daterange class)
                                    $('.datetimepicker').datetimepicker({
                                        locale: 'es'
                                    });

                                    // Init Tags Inputs (with .js-tags-input class)
                                    jQuery('.js-tags-input').tagsInput({
                                        height: '36px',
                                        width: '100%',
                                        defaultText: 'Add tag',
                                        removeWithBackspace: true,
                                        delimiter: [',']
                                    });


                                    // Init Masked Inputs
                                    // a - Represents an alpha character (A-Z,a-z)
                                    // 9 - Represents a numeric character (0-9)
                                    // * - Represents an alphanumeric character (A-Z,a-z,0-9)
                                    jQuery('.js-masked-date').mask('99/99/9999');
                                    jQuery('.js-masked-date-dash').mask('99-99-9999');
                                    jQuery('.js-masked-phone').mask('(999) 999-9999');
                                    jQuery('.js-masked-phone-ext').mask('(999) 999-9999? x99999');
                                    jQuery('.js-masked-taxid').mask('99-9999999');
                                    jQuery('.js-masked-ssn').mask('999-99-9999');
                                    jQuery('.js-masked-pkey').mask('a*-999-a999');

                                    var arrayBotones = [
                                            ['styleList', ['style']],
                                            ['style', ['bold', 'italic', 'underline', 'clear']],
                                            ['fontsize', ['fontsize']],
                                            ['color', ['color']],
                                            ['para', ['ul', 'ol', 'paragraph']],
                                            ['height', ['height']],
                                            ['table', ['table']],
                                            ['insert', ['link', 'picture', 'video', 'hr']],
                                            ['misc', ['fullscreen', 'codeview']],
                                            ['help', ['help']]
                                    ];

                                    console.log(arrayBotones);
                                    // Init full text editor
                                    jQuery('#js-summernote').summernote({
                                        height: 350,
                                        minHeight: null,
                                        maxHeight: null,
                                        toolbar: arrayBotones
                                    });

                                });
                                jQuery.fn.selectText = function () {
                                    var range, selection;
                                    return this.each(function () {
                                        if (document.body.createTNoticiange) {
                                            range = document.body.createTNoticiange();
                                            range.moveToElementText(this);
                                            range.select();
                                        } else if (window.getSelection) {
                                            selection = window.getSelection();
                                            range = document.createRange();
                                            range.selectNodeContents(this);
                                            selection.removeAllRanges();
                                            selection.addRange(range);
                                        }
                                    });
                                };
                             

                                $('#js-summernote').on('summernote.paste', function (customEvent, nativeEvent) {
                                    setTimeout(function () {
                                        console.log($('.note-editable'));
                                        $('.note-editable').selectText();
                                        $("#js-summernote").summernote("removeFormat");
                                       // $('.note-editable').unselectText();
                                    }, 100);
                                });
                                /*
                                Insert
                                    picture: open image dialog
                                    link: open link dialog
                                    video: open video dialog
                                    table: insert a table
                                    hr: insert a horizontal rule
                                Font Style
                                    fontname: set font family
                                    fontsize: set font size
                                    color: set foreground and background color
                                    bold: toggle font weight
                                    italic: toggle italic
                                    underline: toggle underline
                                    strikethrough: toggle strikethrough
                                    superscript: toggle superscript
                                    subscript: toggle subscript
                                    clear: clear font style
                                Paragraph style
                                    style: format selected block
                                    ol: toggle ordered list
                                    ul: toggle unordered list
                                    paragraph: dropdown for paragraph align
                                    height: set line height
                                Misc
                                    fullscreen: toggle fullscreen editing mode
                                    codeview: toggle wysiwyg and html editing mode
                                    undo: undo
                                    redo: redo
                                    help: open help dialog

                                */
    </script>
}
